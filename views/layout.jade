doctype html

mixin fa(type, text, title)
	span(class='fa fa-'+type, title=title)
	if text
		| 	
		= text

mixin faSpinner(text)
	i(class='fa fa-circle-o-notch fa-spin')
	if text
		| 	
		= text

mixin faLink(faType, href, text, title)
	a(href=href)
		+fa(faType, text, title)
		
mixin faLinkBlank(faType, href, text, title)
	a(href=href, target='_blank')
		+fa(faType, text, title)
		
mixin faButtonSmall(faType, href, text, title)
	a.btn.btn-default.btn-xs(href=href, title=title)
		+fa(faType, text)
		
mixin faButtonDefault(faType, href, text, title)
	a.btn.btn-default(href=href, title=title)
		+fa(faType, text)
		
mixin faButtonPrimary(faType, href, text, title)
	a.btn.btn-primary(href=href, title=title)
		+fa(faType, text)
		
mixin buttonPrimary(href, text, title)
	a.btn.btn-primary(href=href, title=title)= text
	
mixin faButtonSubmit(faType, text, title)
	button.btn.btn-warning(type='submit', title=title)
		+fa(faType, text)

mixin buttonSubmit(text, title)
	button.btn.btn-warning(type='submit', title=title)= text	

mixin buttonHome()
	a.btn.btn-primary(href='/', title='Home')= 'Home'

mixin inputHidden(id, value)
	input(type='hidden', name=id, id=id, value=value)

mixin inputRequired(type, id, text, value)
	.form-group
		label!= text
		input.form-control(type=type, name=id, id=id, required, value=value)

mixin input(type, id, text, value)
	.form-group
		label!= text
		input.form-control(type=type, name=id, id=id, value=value)

mixin inputWithPlaceholder(type, id, text, value)
	.form-group
		input.form-control(type=type, name=id, id=id, value=value, placeholder=text)

mixin check(id, text, value)
	.checkbox
		label
			if value
				input(type='checkbox', name=id, id=id, checked='checked')
			else
				input(type='checkbox', name=id, id=id)
			!= text

html
	head
		title= title
		meta(name="viewport",content="width=device-width, initial-scale=1, maximum-scale=1")

		//TODO move these to pipeline
		link(href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css", rel="stylesheet")
		link(href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css", rel="stylesheet")
		script(src='https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js')
		script(src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js")
		script(src="//builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v2.0.0.js")

		// STYLES
		link(rel="stylesheet", href="/styles/importer.css")
		// STYLES END

		block styles

	body
		.container(ng-app="app")
			block body

		//-
			Client-side Templates
			========================

			HTML templates are important prerequisites of modern, rich client applications.
			To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
			that you load these templates client-side.

			By default, your Gruntfile is configured to automatically load and precompile
			client-side JST templates in your `assets/templates` folder, then
			include them here automatically (between TEMPLATES and TEMPLATES END).

			To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Import templates from other directories
					+ Use a different template engine (handlebars, jade, dust, etc.)
					+ Internationalize your client-side templates using a server-side
						stringfile before they're served.

		// TEMPLATES
		
		// TEMPLATES END
		
		// SCRIPTS
		script(src="/js/dependencies/sails.io.js")
		script(src="/bower_components/angular/angular.js")
		script(src="/hint.js")
		script(src="/bower_components/angular-filter/dist/angular-filter.js")
		script(src="/bower_components/angular-sails/dist/angular-sails.js")
		script(src="/js/app.js")
		script(src="/js/controllers/itemController.js")
		// SCRIPTS END
